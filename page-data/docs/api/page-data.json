{"componentChunkName":"component---src-templates-docs-js","path":"/docs/api/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"bhdl-api-reference\" style=\"position:relative;\"><a href=\"#bhdl-api-reference\" aria-label=\"bhdl api reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BHDL API Reference</h1>\n<h2 id=\"grow-your-circuit-withmake-circuit\" style=\"position:relative;\"><a href=\"#grow-your-circuit-withmake-circuit\" aria-label=\"grow your circuit withmake circuit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>grow your circuit with<code class=\"language-text\">make-circuit</code></h2>\n<p>This syntax makes it easy to define a composite. The syntax is:</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token function\">make-circuit</span>\n  #:external-pins <span class=\"token punctuation\">(</span><span class=\"token function\">o1</span> o2<span class=\"token punctuation\">)</span>\n  #:vars <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">a</span> <span class=\"token punctuation\">(</span><span class=\"token function\">R</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">[</span><span class=\"token function\">b</span> <span class=\"token punctuation\">(</span><span class=\"token function\">C</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">[</span><span class=\"token function\">c</span> <span class=\"token punctuation\">(</span><span class=\"token function\">crystal</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> self.o1 a b c self.o2<span class=\"token punctuation\">)</span>\n  #:layout <span class=\"token punctuation\">(</span><span class=\"token function\">hc-append</span> a b c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This declares a circuit, with external pins named <code class=\"language-text\">o1</code> and <code class=\"language-text\">o2</code> respectively. It\ncontains a resistor, a capacitor, and a crystal, lined together linearly. In the\nmeantime, the physical layout is defined as horizontally append the three\ncomponents.</p>\n<p>To make the circuit capable of using line connection syntax, define the <code class=\"language-text\">left</code>\nand <code class=\"language-text\">right</code> external pins and connect accordingly. E.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">make-circuit</span>\n   #:vars <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SKRPACE010</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   #:external-pins <span class=\"token punctuation\">(</span><span class=\"token function\">left</span> right<span class=\"token punctuation\">)</span>\n   #:layout it\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> self.left it.A1<span class=\"token punctuation\">)</span>\n                   <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> self.right it.B1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"connection-syntax-and-semantics\" style=\"position:relative;\"><a href=\"#connection-syntax-and-semantics\" aria-label=\"connection syntax and semantics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connection syntax and semantics</h3>\n<p>Composing circuit is the process of combining smaller circuits and atoms with\nnetlist. There are 4 syntax for composing Composites. The return value is a\nComposite that contains the used components, and the external pin for the\nreturned Composite is denoted as <code class=\"language-text\">out.X</code>.</p>\n<p>The line connection:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">*-</span> a b c<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Results in the netlist:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">out.1 -- a.1\na.2 -- b.1\nb.2 -- c.1\nc.2 -- out.2</code></pre></div>\n<p>The split connection:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">*&lt;</span> a b c<span class=\"token punctuation\">)</span></code></pre></div>\n<p>results in the netlist:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">out.1 -- a.1 -- b.1 -- c.1\nout.2 -- a.2 -- b.2 -- c.2</code></pre></div>\n<p>The vectorized connection:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">*=</span> <span class=\"token punctuation\">(</span><span class=\"token car\">a</span> <span class=\"token punctuation\">[</span>p1 p2 p3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>b.p1 c.p2 d.p3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>results in the netlist:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a.p1 -- b.p1\na.p2 -- c.p2\na.p3 -- d.p3</code></pre></div>\n<p>Note that the vector supports two slightly different syntax: the component can\nbe write once. I.e. <code class=\"language-text\">(a [1 2 3])</code> is equivalent to <code class=\"language-text\">([a.1 a.2 a.3])</code>.</p>\n<p>And finally the netlist syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">*+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a.1 b.1 c.1<span class=\"token punctuation\">]</span>\n     <span class=\"token punctuation\">[</span>a.2 b.3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>results in the netlis:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a.1 -- b.1 -- c.1\na.2 -- b.3</code></pre></div>\n<h3 id=\"layout-co-design\" style=\"position:relative;\"><a href=\"#layout-co-design\" aria-label=\"layout co design permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Layout co-design</h3>\n<p>The layout is inspired by <a href=\"https://docs.racket-lang.org/pict/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">racket's functional picture\nlibrary</a>. The following combinators are\nprovided:</p>\n<p>The <code class=\"language-text\">*-append</code> family of functions append its arguments horizontally or\nvertically:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vl-append\nvc-append\nvr-append\nht-append\nhc-append\nhb-append\nhtl-append\nhbl-append</code></pre></div>\n<p>The <code class=\"language-text\">*-superimpose</code> family of functions overlap its arguments.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lt-superimpose\nlb-superimpose\nlc-superimpose\nltl-superimpose\nlbl-superimpose\nrt-superimpose\nrb-superimpose\nrc-superimpose\nrtl-superimpose\nrbl-superimpose\nct-superimpose\ncb-superimpose\ncc-superimpose\nctl-superimpose\ncbl-superimpose</code></pre></div>\n<p>You can also rotate or pin-over at a absolute location in terms of (x,y)\ncoordinates:</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token function\">rotate</span> item <span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">pin-over</span> base dx dy item<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"visualization-and-exporting\" style=\"position:relative;\"><a href=\"#visualization-and-exporting\" aria-label=\"visualization and exporting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Visualization and exporting</h2>\n<p>The layout can be visualized via</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token function\">show-layout</span> my-circuit<span class=\"token punctuation\">)</span></code></pre></div>\n<p>To export KiCAD files, use <code class=\"language-text\">circuit-export</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token function\">circuit-export</span> fitboard\n                #:auto-place <span class=\"token boolean\">#t</span>\n                #:formats <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span>kicad pdf dsn ses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The arguments:</p>\n<ul>\n<li><code class=\"language-text\">#:auto-place</code> determins whether to run placement engine. This requires a backend\nplacement engine running on specific port (by default 8082)</li>\n<li>\n<p><code class=\"language-text\">#:formats</code>: this is a list of export formats</p>\n<ul>\n<li>kicad: kicad_pcb file</li>\n<li>pdf</li>\n<li>dsn: Spectre DSN</li>\n<li>ses: run freerouting on dsn. This requires dsn is exported, freerouting.jar\nexecutable can be found, and you are running a GUI session so that the\nfreerouting.jar window can pop up (which means it cannot run in jupyter\nnotebook)</li>\n</ul>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#bhdl-api-reference\">BHDL API Reference</a></p>\n<ul>\n<li>\n<p><a href=\"#grow-your-circuit-withmake-circuit\">grow your circuit with<code class=\"language-text\">make-circuit</code></a></p>\n<ul>\n<li><a href=\"#connection-syntax-and-semantics\">Connection syntax and semantics</a></li>\n<li><a href=\"#layout-co-design\">Layout co-design</a></li>\n</ul>\n</li>\n<li><a href=\"#visualization-and-exporting\">Visualization and exporting</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":""}}},"pageContext":{"slug":"/docs/api/"}},"staticQueryHashes":["3649515864"]}