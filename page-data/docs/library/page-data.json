{"componentChunkName":"component---src-templates-docs-js","path":"/docs/library/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"bhdl-component-library\" style=\"position:relative;\"><a href=\"#bhdl-component-library\" aria-label=\"bhdl component library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BHDL Component Library</h1>\n<p>BHDL is being actively developing, thus it's not too meaningful to provide an up-to-date library reference. For now, please refer to the <a href=\"../bhdl-lib/bhdl/private/library-IC.rkt\">library-IC.rkt</a> file for the available components and their pins.</p>\n<p>Basic components:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Resistor R Capacitor C Fuse LED LED0603 Diode 1N4148W FerriteBead Crystal-2\nCrystal-4 PinHeader PinHeader2 Transistor AMS1117-3.3</code></pre></div>\n<p>Simple ICs:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CP2102N</code></pre></div>\n<p>ICs:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ATtiny25 ATtiny45 ATtiny85 ATmega128 ATmega16 ATmega48 ATmega88 ATmega168\nATmega328 ATmega8U2 ATmega16U2 ATmega32U2 ATmega16U4 ATmega32U4 ATmega8\nGD32VF103CBT6\nESP32-WROVER-E</code></pre></div>\n<p>Aruinos</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Arduino-Uno\nArduino-Uno-ICSP\nArduino-Nano\nArduino-Mini\nArduino-Micro\nArduino-MKR</code></pre></div>\n<p>Other components:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Cherry kailh-socket mounting-hole stabilizer-2u\nUSB-C-6\nUSB-C-16\nUSB-Micro</code></pre></div>\n<h1 id=\"creating-and-contributing-your-own-library\" style=\"position:relative;\"><a href=\"#creating-and-contributing-your-own-library\" aria-label=\"creating and contributing your own library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating (and Contributing!) Your Own Library</h1>\n<p>Components can be defined via the <code class=\"language-text\">define/IC</code> syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token function\">define/IC</span> <span class=\"token punctuation\">(</span><span class=\"token function\">LED</span><span class=\"token punctuation\">)</span>\n  #:FP <span class=\"token punctuation\">(</span><span class=\"token function\">fp-diode</span> plus minus<span class=\"token punctuation\">)</span>\n  #:PREFIX <span class=\"token string\">\"LED\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notes about the fields:</p>\n<ul>\n<li><code class=\"language-text\">#:FP</code> expects a footprint and pin names. These pin names are arbitrary but\nthe order is important, it will be mapped to the exact order of the\ncorresponding footprint. Refer to footprint document for the definition of the\nfootprint pin order.</li>\n<li><code class=\"language-text\">#:PREFIX</code> defines what is the prefix to be appearing on PCB. E.g. R1, LED4</li>\n</ul>\n<p>This defines a function called <code class=\"language-text\">LED</code>, and an LED instance can be created via the\nfunction call <code class=\"language-text\">(define myled (LED))</code>. The pins named <code class=\"language-text\">plus</code> and <code class=\"language-text\">minus</code> can be\naccessed to make connections. To enalbe a component to connect in \"line\nconnection syntax\", you need to specify the #:LEFT and #:RIGHT pins:</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token function\">define/IC</span> <span class=\"token punctuation\">(</span><span class=\"token function\">LED</span><span class=\"token punctuation\">)</span>\n  #:FP <span class=\"token punctuation\">(</span><span class=\"token function\">fp-diode</span> plus minus<span class=\"token punctuation\">)</span>\n  #:PREFIX <span class=\"token string\">\"LED\"</span>\n  #:LEFT plus\n  #:RIGHT minus<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The left and right delcaration makes it possible to use components of more than\n2 pins in the line connection syntax. For exampole, 4 pin switches (where 2\ngroups are connected)</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token function\">define/IC</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SKRPACE010</span><span class=\"token punctuation\">)</span>\n  #:FP <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">lcsc->fp</span> <span class=\"token string\">\"C139797\"</span><span class=\"token punctuation\">)</span>\n        A1 A2\n        B1 B2<span class=\"token punctuation\">)</span>\n  #:PREFIX <span class=\"token string\">\"KEY\"</span>\n  #:LEFT A1\n  #:RIGHT B1<span class=\"token punctuation\">)</span></code></pre></div>\n<p>One can change the default left and right orientation easily by defining a\ncircuit wrapper, more on this on the <code class=\"language-text\">make-circuit</code> document.</p>\n<p>Many two-pin non-polarized components do not have meaningful names. E.g. a\nresistor just have pin 1 and pin 2. A pin header just have pin 1 2 3 4 ... For\nthese components, you can write <code class=\"language-text\">#:auto-FP</code> in place of <code class=\"language-text\">#:FP</code>, and the numbers\n(starting from 1) will be added for you based on how many pins the footprint\nhas. You can use 1 and 2 for <code class=\"language-text\">#:LEFT</code> and <code class=\"language-text\">#:RIGHT</code> declaration. E.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token function\">define/IC</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Resistor</span> R<span class=\"token punctuation\">)</span>\n  #:auto-FP <span class=\"token punctuation\">(</span><span class=\"token function\">fp-resistor</span> <span class=\"token string\">\"0603\"</span><span class=\"token punctuation\">)</span>\n  #:PREFIX <span class=\"token string\">\"R\"</span>\n  #:LEFT <span class=\"token number\">1</span>\n  #:RIGHT <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>There may be many footprints for an IC. Thus you are allowed to specify multiple\nfootprints:</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token function\">define/IC</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Resistor</span> R<span class=\"token punctuation\">)</span>\n  #:auto-named-FP <span class=\"token punctuation\">(</span><span class=\"token string\">\"0603\"</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fp-resistor</span> <span class=\"token string\">\"0603\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  #:auto-named-FP <span class=\"token punctuation\">(</span><span class=\"token string\">\"0805\"</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fp-resistor</span> <span class=\"token string\">\"0805\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  #:PREFIX <span class=\"token string\">\"R\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can specify which footprint variant to use via</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token function\">R</span> #:FP <span class=\"token string\">\"0603\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If not specified, the first one is used.</p>\n<p>For ICs, there are two special notes:</p>\n<ol>\n<li>ICs typically have well-defined footprints. For that, some syntax sugar names\ncan be used, e.g. <code class=\"language-text\">#:DIP</code> <code class=\"language-text\">#:QFN</code>.</li>\n<li>There are often more than one name for a pin of IC. E.g. For ATTiny-serie\nMCUs, the PB0 also functions as <code class=\"language-text\">MOSI</code>, <code class=\"language-text\">SDA</code>, <code class=\"language-text\">PCINT0</code>, and more. This must\nbe specified in <code class=\"language-text\">#:ALIAS</code> to delcare they are aliases for the same pin. All\nthe pin names will be available for making connections.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token function\">define/IC</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ATtiny25</span> ATtiny45 ATtiny85<span class=\"token punctuation\">)</span>\n  #:ALTS <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">VCC</span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">[</span><span class=\"token function\">GND</span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">[</span><span class=\"token function\">PB0</span> MOSI DI SDA AIN0 OC0A OC1A AREF PCINT0<span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">[</span><span class=\"token function\">PB2</span> SCK USCK SCL ADC1 T0 INT0 PCINT2<span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">[</span><span class=\"token function\">PB3</span> PCINT3 XTAL1 CLKI OC1B ADC3<span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">[</span><span class=\"token function\">PB4</span> PCINT4 XTAL2 CLKO OC1B ADC2<span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">[</span><span class=\"token function\">PB5</span> PCINT5 RESET ADC0 DW<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  #:DIP <span class=\"token punctuation\">(</span><span class=\"token number\">8</span> PB5 PB3 PB4 GND PB0 PB1 PB2 VCC<span class=\"token punctuation\">)</span>\n  #:QFN <span class=\"token punctuation\">(</span><span class=\"token number\">20</span> PB5 PB3 DNC DNC PB4\n            DNC DNC GND DNC DNC\n            PB0 PB1 DNC PB2 VCC\n            DNC DNC DNC DNC DNC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"footprints\" style=\"position:relative;\"><a href=\"#footprints\" aria-label=\"footprints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>footprints</h1>\n<p>BHDL can <a href=\"bhdl-lib/bhdl/private/fp-kicad.rkt\">read KiCAD</a> and <a href=\"bhdl-lib/bhdl/private/fp-easyeda.rkt\">read\nEasyEDA</a> footprints. For many components\nlisted on LCSC.com have associated footprints. We thus support getting the\nfootprint directly via the ID. E.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token function\">lcsc->fp</span> <span class=\"token string\">\"C466653\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If the local library <code class=\"language-text\">$BHDL_LIBRARY_PATH/easyeda</code> does not contain the\nfootprint, it will query EasyEDA website and writes the footprint to\n<code class=\"language-text\">$BHDL_LIBRARY_PATH/easyeda/xxx.json</code> for caching. As we run it for more\ncomponents, our repo will be tracking many components.</p>\n<p>This makes it easy to define a new component, e.g. the <a href=\"https://lcsc.com/product-detail/Switching-Diode_High-Diode-1N4148W_C466653.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">1N4148W\ndiode</a> can be defined simply as:</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\"><span class=\"token punctuation\">(</span><span class=\"token function\">define/IC</span> <span class=\"token punctuation\">(</span><span class=\"token function\">1N4148W</span><span class=\"token punctuation\">)</span>\n  #:FP <span class=\"token punctuation\">(</span><span class=\"token function\">lcsc->fp</span> <span class=\"token string\">\"C466653\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> +<span class=\"token punctuation\">)</span>\n  #:LEFT +\n  #:RIGHT -\n  #:PREFIX <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The order of footprint pins are defined as the orders of the pin occurance in\nthe KiCAD or EasyEDA footprints, not the name of footprint pins. Although many\nfootprints have numerical 1 2 3 ..., there are also text name, and there's no\nheuristic to sort them.</p>\n<p>The choice of using this order of pins has a caveat: the pin order might not be\nthe actual numerical order. This can be especially comon in KiCAD footprints\nwhere the numerical numbers may be mixed in arbitrary order.</p>","tableOfContents":"<ul>\n<li><a href=\"#bhdl-component-library\">BHDL Component Library</a></li>\n<li><a href=\"#creating-and-contributing-your-own-library\">Creating (and Contributing!) Your Own Library</a></li>\n<li><a href=\"#footprints\">footprints</a></li>\n</ul>","frontmatter":{"title":""}}},"pageContext":{"slug":"/docs/library/"}},"staticQueryHashes":["3649515864"]}