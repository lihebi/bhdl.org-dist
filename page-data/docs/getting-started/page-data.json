{"componentChunkName":"component---src-templates-docs-js","path":"/docs/getting-started/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"bhdl-getting-started-guide\" style=\"position:relative;\"><a href=\"#bhdl-getting-started-guide\" aria-label=\"bhdl getting started guide permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BHDL Getting Started Guide</h1>\n<p>The programming with BHDL consists of several steps:</p>\n<ol>\n<li>\n<p>Component Selection. The information needed are:</p>\n<ol>\n<li>the Pin definition of the IC</li>\n<li>specify the desired footprint</li>\n</ol>\n</li>\n<li>\n<p>Use <code class=\"language-text\">make-circuit</code> API to compose your circuit. Optionally, hierarchical compose your more complex circuit using <code class=\"language-text\">make-circuit</code>. Each <code class=\"language-text\">make-circuit</code> API expects several components:</p>\n<ol>\n<li>what the external pins are</li>\n<li>connect the components using the 4 types of connection syntax</li>\n<li>specify physical layout of components</li>\n</ol>\n</li>\n<li>Expose your design via <code class=\"language-text\">circuit-export</code> API, to KiCAD, PDF, BOM, etc.</li>\n</ol>\n<p>In this guide, we will go over these steps using a simple keyboard example. We will assume you have a jupyter notebook opened with IRacket kernel. Please refer to the setup documents if you need to setup one, or use our online server.</p>\n<p><img src=\"./demo-board-keyboard-3D.png\" alt=\"keyboard-3D\"></p>\n<p><img src=\"./gatsby-astronaut.png\" alt=\"keyboard-3D\"></p>\n<h2 id=\"setting-up\" style=\"position:relative;\"><a href=\"#setting-up\" aria-label=\"setting up permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up</h2>\n<p>The first step is to use the BHDL library via:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">putenv</span> <span class=\"token string\">\"BHDL_LIBRARY_PATH\"</span> <span class=\"token string\">\"~/bhdl/bhdl-footprints\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">require</span> bhdl<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Note that you must setup <code class=\"language-text\">BHDL_LIBRARY_PATH</code> ENV variable to your footprint path before requiring the BHDL library.</p>\n<p>We probably also need some racket libraries:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">require</span> racket/list\n         racket/format\n         <span class=\"token punctuation\">(</span><span class=\"token function\">prefix-in</span> pict: pict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We'll want to add some global signals to refer:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> global\n  <span class=\"token punctuation\">(</span><span class=\"token function\">make-circuit</span>\n   #:external-pins <span class=\"token punctuation\">(</span><span class=\"token function\">GND</span> 3V3 5V VCC USB5V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"the-keyboard-matrix\" style=\"position:relative;\"><a href=\"#the-keyboard-matrix\" aria-label=\"the keyboard matrix permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The keyboard matrix</h2>\n<p>The components:</p>\n<ul>\n<li>Kailh hot-swap socket: <code class=\"language-text\">kailh-socket</code></li>\n<li>Diodes: <code class=\"language-text\">1N4148W</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">key-with-diode</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">make-circuit</span>\n   #:external-pins <span class=\"token punctuation\">(</span><span class=\"token function\">left</span> right<span class=\"token punctuation\">)</span>\n   #:vars <span class=\"token punctuation\">(</span><span class=\"token function\">[d</span> <span class=\"token punctuation\">(</span><span class=\"token function\">1N4148W</span><span class=\"token punctuation\">)</span>]\n           [key <span class=\"token punctuation\">(</span><span class=\"token function\">kailh-socket</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> self.left key d self.right<span class=\"token punctuation\">)</span>\n   #:layout <span class=\"token punctuation\">(</span><span class=\"token function\">vc-append</span> key d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can call the <code class=\"language-text\">key-with-diode</code> to create this small circuits for each key.</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> matrix\n  <span class=\"token punctuation\">(</span><span class=\"token function\">for/list</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[row</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in-range</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">(</span><span class=\"token function\">for/list</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[col</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in-range</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">(</span><span class=\"token function\">key-with-diode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">matrix</code> variable holds 4x5 keys. We then connect them together:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> matrix-module\n  <span class=\"token punctuation\">(</span><span class=\"token function\">make-circuit</span>\n   #:external-pins <span class=\"token punctuation\">(</span><span class=\"token function\">row[4]</span> col[5]<span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">;; col in, row out</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">for*/list</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[i</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in-range</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>]\n                        [j <span class=\"token punctuation\">(</span><span class=\"token function\">in-range</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n                       <span class=\"token punctuation\">(</span><span class=\"token function\">debug</span> <span class=\"token string\">\"connecting\"</span> i j<span class=\"token punctuation\">)</span>\n                       <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> self.col[j]\n                           <span class=\"token punctuation\">(</span><span class=\"token builtin\">list-ref</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list-ref</span> matrix i<span class=\"token punctuation\">)</span> j<span class=\"token punctuation\">)</span>\n                           self.row[i]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   #:layout <span class=\"token punctuation\">(</span><span class=\"token function\">vc-append</span>\n             <span class=\"token punctuation\">(</span><span class=\"token function\">for/list</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[row</span> matrix]<span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">(</span><span class=\"token function\">hc-append</span> row ..<span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">)</span> ..<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We note several points here:</p>\n<ul>\n<li>We don't use <code class=\"language-text\"></code>#:vars<code class=\"language-text\">to create components, because we are using the</code>matrix` variable that is already created</li>\n<li>We specify 4+5 external pins for rows and columns, respectively</li>\n<li>We use a loop to connect the external row and column pins to the corresponding key in the matrix.</li>\n<li>Finally, we specify the layout to be *horizontally append\" (via <code class=\"language-text\">hc-append</code> API) to form the rows and \"vertically append\" (via <code class=\"language-text\">vc-append</code> API) to form the columns.</li>\n</ul>\n<p>The end result of the key matrix module looks like this:</p>\n<p><img src=\"./assets/demo-board-matrix.png\" alt=\"matrix-image\"></p>\n<h2 id=\"the-mcu-board\" style=\"position:relative;\"><a href=\"#the-mcu-board\" aria-label=\"the mcu board permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The MCU board</h2>\n<p>The components:</p>\n<ul>\n<li>Atmega32U4</li>\n<li>Micro USB connector</li>\n<li>16MHz Crystal</li>\n<li>Resistors, Capacitors, LEDs will be created \"inline\"</li>\n</ul>\n<p>The variables, external pins and layout looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> mcu-module\n  <span class=\"token punctuation\">(</span><span class=\"token function\">make-circuit</span>\n   #:vars <span class=\"token punctuation\">(</span><span class=\"token function\">[mcu</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ATmega32U4</span> #:FP <span class=\"token string\">\"TQFP-44\"</span><span class=\"token punctuation\">)</span>]\n           [usb <span class=\"token punctuation\">(</span><span class=\"token function\">USB-Micro</span><span class=\"token punctuation\">)</span>]\n           [icsp <span class=\"token punctuation\">(</span><span class=\"token function\">icsp-header</span><span class=\"token punctuation\">)</span>]\n           [xtal <span class=\"token punctuation\">(</span><span class=\"token function\">Crystal-4</span> <span class=\"token symbol\">'16MHz</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n   #:external-pins <span class=\"token punctuation\">(</span><span class=\"token function\">row[4]</span> col[5]<span class=\"token punctuation\">)</span>\n   #:layout <span class=\"token punctuation\">(</span><span class=\"token function\">vc-append</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rotate</span> usb pi<span class=\"token punctuation\">)</span> mcu icsp<span class=\"token punctuation\">)</span>\n   #:layout ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Some notes about this code snippets:</p>\n<ul>\n<li><code class=\"language-text\">#:vars</code> section: We create several \"big components\" in the <code class=\"language-text\">#:vars</code> declaration, including the MCU, USB connector, ICSP header and crystal, because they have multiple pins and we want a handle variable to refer to them. All other components like resistors and capacitors are created \"inline\", where we don't really want to give them a name.</li>\n<li><code class=\"language-text\">#:external-pins</code> section: The external pin of this module is 4+5 pins for row and column scanning of the key matrix.</li>\n<li><code class=\"language-text\">#:layout</code> section: We layout the USB, MCU and ICSP header to be vertically appended. We don't care much about the locations of other components such as the resistors, capacitors. They will be placed by our automatic placement engine to appropriate locations by optimizing the total wire length (formally HPWL).</li>\n</ul>\n<p>There are a lot of staff going on in the connection section, and we'll describe them in small sections. First, the ICSP connector for flashing firmware:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> mcu-module\n  <span class=\"token punctuation\">(</span><span class=\"token function\">make-circuit</span>\n   ...\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mcu</span> <span class=\"token punctuation\">(</span><span class=\"token function\">MOSI</span> SCLK MISO RESET VCC GND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token function\">icsp</span> <span class=\"token punctuation\">(</span><span class=\"token function\">MOSI</span> SCK MISO RESET VCC GND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Then the Power module including reset and switch:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> mcu-module\n  <span class=\"token punctuation\">(</span><span class=\"token function\">make-circuit</span>\n   ...\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> mcu.VCC mcu.UVCC mcu.AVCC global.VCC<span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> mcu.GND mcu.UGND global.GND<span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> mcu.RESET <span class=\"token punctuation\">(</span><span class=\"token function\">*&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">LL4148</span><span class=\"token punctuation\">)</span>\n                           <span class=\"token punctuation\">(</span><span class=\"token function\">R</span> <span class=\"token symbol\">'10k</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> global.5V<span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> mcu.RESET[-1] <span class=\"token punctuation\">(</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">)</span> global.GND<span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">;; An LED for blinking</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> mcu.PC6 <span class=\"token punctuation\">(</span><span class=\"token function\">R</span> <span class=\"token symbol\">'1k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">LED0603</span> <span class=\"token symbol\">'red</span><span class=\"token punctuation\">)</span> global.GND<span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> mcu.UCAP <span class=\"token punctuation\">(</span><span class=\"token function\">C</span> <span class=\"token symbol\">'1uf</span><span class=\"token punctuation\">)</span> global.GND<span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> global.VCC <span class=\"token punctuation\">(</span><span class=\"token function\">*&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">C</span> <span class=\"token symbol\">'1uf</span><span class=\"token punctuation\">)</span>\n                          <span class=\"token punctuation\">(</span><span class=\"token function\">C</span> <span class=\"token symbol\">'100nf</span><span class=\"token punctuation\">)</span>\n                          <span class=\"token punctuation\">(</span><span class=\"token function\">C</span> <span class=\"token symbol\">'100nf</span><span class=\"token punctuation\">)</span>\n                          <span class=\"token punctuation\">(</span><span class=\"token function\">C</span> <span class=\"token symbol\">'100nf</span><span class=\"token punctuation\">)</span>\n                          <span class=\"token punctuation\">(</span><span class=\"token function\">C</span> <span class=\"token symbol\">'100nf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           global.GND<span class=\"token punctuation\">)</span>\n   ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The crystal module:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> mcu-module\n  <span class=\"token punctuation\">(</span><span class=\"token function\">make-circuit</span>\n   ...\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> mcu.XTAL1 xtal.XIN<span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> xtal.XOUT mcu.XTAL2<span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> xtal.GND global.GND<span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> mcu.XTAL1 <span class=\"token punctuation\">(</span><span class=\"token function\">C</span> <span class=\"token symbol\">'22pf</span><span class=\"token punctuation\">)</span> global.GND<span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> mcu.XTAL2 <span class=\"token punctuation\">(</span><span class=\"token function\">C</span> <span class=\"token symbol\">'22pf</span><span class=\"token punctuation\">)</span> global.GND<span class=\"token punctuation\">)</span>\n   ...\n   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The USB connector:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> mcu-module\n  <span class=\"token punctuation\">(</span><span class=\"token function\">make-circuit</span>\n   ...\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> mcu.D+ <span class=\"token punctuation\">(</span><span class=\"token function\">R</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span> usb.D+<span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> mcu.D- <span class=\"token punctuation\">(</span><span class=\"token function\">R</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span> usb.D-<span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> mcu.VBUS usb.VBUS global.VCC<span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*-</span> mcu.UGND usb.GND global.GND<span class=\"token punctuation\">)</span>\n   ...\n   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Finally, we select some GPIO pins for row and column scanning the matrix:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> mcu-module\n  <span class=\"token punctuation\">(</span><span class=\"token function\">make-circuit</span>\n   ...\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">self</span> row [0 3]<span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">(</span><span class=\"token function\">self</span> row [0 3]<span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">(</span><span class=\"token function\">mcu</span> [PB0 PB4 PB5 PB6]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">self</span> col [0 4]<span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">(</span><span class=\"token function\">mcu</span> [PD0 PD1 PD2 PD3 PD4]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   ...\n   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The end result would looks like this:</p>\n<p><img src=\"./assets/demo-board-mcu.png\" alt=\"mcu-image\"></p>\n<h2 id=\"connecting-the-mcu-module-and-matrix-module\" style=\"position:relative;\"><a href=\"#connecting-the-mcu-module-and-matrix-module\" aria-label=\"connecting the mcu module and matrix module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connecting the MCU module and Matrix Module</h2>\n<p>This is simply:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> keyboard <span class=\"token punctuation\">(</span><span class=\"token function\">make-circuit</span>\n #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mcu-module</span> row [0 3]<span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token function\">matrix-module</span> row [0 3]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n #:connect <span class=\"token punctuation\">(</span><span class=\"token function\">*=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mcu-module</span> col [0 4]<span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token function\">matrix-module</span> col [0 4]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n #:layout <span class=\"token punctuation\">(</span><span class=\"token function\">vc-append</span> mcu-module matrix-module<span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And we export the keyboard to KiCAD, PNG, BOM:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">parameterize</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[current-directory</span> <span class=\"token string\">\"./out/demo-board/keyboard\"</span>]\n                 [padding-general 2]<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">(</span><span class=\"token function\">circuit-export</span> keyboard\n                                #:auto-place <span class=\"token boolean\">#t</span>\n                                #:formats <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span>kicad pdf png bom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The keyboard looks like this:</p>\n<p><img src=\"./assets/demo-board-keyboard.png\" alt=\"keyboard-img\"></p>\n<p>The BOM.csv contains the mapping from the annotations (e.g. U1, R4, D3) to the component name, footprint, and value.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>Annotation</strong></th>\n<th align=\"center\">** Name**</th>\n<th align=\"center\">** Footprint**</th>\n<th align=\"center\">** Values**</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">U36</td>\n<td align=\"center\">kailh-socket</td>\n<td align=\"center\">1</td>\n<td align=\"center\">()</td>\n</tr>\n<tr>\n<td align=\"center\">D37</td>\n<td align=\"center\">1N4148W</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">()</td>\n</tr>\n<tr>\n<td align=\"center\">U38</td>\n<td align=\"center\">kailh-socket</td>\n<td align=\"center\">1</td>\n<td align=\"center\">()</td>\n</tr>\n<tr>\n<td align=\"center\">D39</td>\n<td align=\"center\">1N4148W</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">()</td>\n</tr>\n<tr>\n<td align=\"center\">U40</td>\n<td align=\"center\">kailh-socket</td>\n<td align=\"center\">1</td>\n<td align=\"center\">()</td>\n</tr>\n<tr>\n<td align=\"center\">U41</td>\n<td align=\"center\">ATmega16U4/ATmega32U4</td>\n<td align=\"center\">TQFP-44</td>\n<td align=\"center\">()</td>\n</tr>\n<tr>\n<td align=\"center\">U42</td>\n<td align=\"center\">USB-Micro</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">()</td>\n</tr>\n<tr>\n<td align=\"center\">U43</td>\n<td align=\"center\">PinHeader2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">()</td>\n</tr>\n<tr>\n<td align=\"center\">U44</td>\n<td align=\"center\">Crystal-4</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">(16MHz)</td>\n</tr>\n<tr>\n<td align=\"center\">R45</td>\n<td align=\"center\">Resistor/R</td>\n<td align=\"center\">0603</td>\n<td align=\"center\">(1k)</td>\n</tr>\n<tr>\n<td align=\"center\">LED46</td>\n<td align=\"center\">LED0603</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">(red)</td>\n</tr>\n<tr>\n<td align=\"center\">D47</td>\n<td align=\"center\">LL4148</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">()</td>\n</tr>\n<tr>\n<td align=\"center\">R48</td>\n<td align=\"center\">Resistor/R</td>\n<td align=\"center\">0603</td>\n<td align=\"center\">(10k)</td>\n</tr>\n<tr>\n<td align=\"center\">KEY49</td>\n<td align=\"center\">SKRPACE010</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">()</td>\n</tr>\n<tr>\n<td align=\"center\">C50</td>\n<td align=\"center\">Capacitor/C</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">(1uf)</td>\n</tr>\n<tr>\n<td align=\"center\">C51</td>\n<td align=\"center\">Capacitor/C</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">(1uf)</td>\n</tr>\n<tr>\n<td align=\"center\">C52</td>\n<td align=\"center\">Capacitor/C</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">(100nf)</td>\n</tr>\n<tr>\n<td align=\"center\">C53</td>\n<td align=\"center\">Capacitor/C</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">(100nf)</td>\n</tr>\n<tr>\n<td align=\"center\">C54</td>\n<td align=\"center\">Capacitor/C</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">(100nf)</td>\n</tr>\n<tr>\n<td align=\"center\">C55</td>\n<td align=\"center\">Capacitor/C</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">(100nf)</td>\n</tr>\n<tr>\n<td align=\"center\">C56</td>\n<td align=\"center\">Capacitor/C</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">(22pf)</td>\n</tr>\n<tr>\n<td align=\"center\">C57</td>\n<td align=\"center\">Capacitor/C</td>\n<td align=\"center\">#f</td>\n<td align=\"center\">(22pf)</td>\n</tr>\n<tr>\n<td align=\"center\">R58</td>\n<td align=\"center\">Resistor/R</td>\n<td align=\"center\">0603</td>\n<td align=\"center\">(22)</td>\n</tr>\n<tr>\n<td align=\"center\">R59</td>\n<td align=\"center\">Resistor/R</td>\n<td align=\"center\">0603</td>\n<td align=\"center\">(22)</td>\n</tr>\n</tbody>\n</table>\n<p>The <code class=\"language-text\">.kicad_pcb</code> file can be opened by the popular open source PCB EDA software KiCAD. The routing can be done by the open source freerouting software automatically. The end board is manufacture-ready, and looks like this in KiCAD's 3D-viewer:</p>\n<p><img src=\"./assets/demo-board-keyboard-3D.png\" alt=\"keyboard-3D\"></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#bhdl-getting-started-guide\">BHDL Getting Started Guide</a></p>\n<ul>\n<li><a href=\"#setting-up\">Setting up</a></li>\n<li><a href=\"#the-keyboard-matrix\">The keyboard matrix</a></li>\n<li><a href=\"#the-mcu-board\">The MCU board</a></li>\n<li><a href=\"#connecting-the-mcu-module-and-matrix-module\">Connecting the MCU module and Matrix Module</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":""}}},"pageContext":{"slug":"/docs/getting-started/"}},"staticQueryHashes":["3649515864"]}